// Automatically derived from Kind/Term/_.type
Kind.Term.match (x: (Kind.Term)) -(p: (x: (Kind.Term)) Type) (typ: (orig: U60) (p (Kind.Term.typ orig))) (hol: (orig: U60) (number: U60) (p (Kind.Term.hol orig number))) (var: (orig: U60) (name: U60) (index: U60) (p (Kind.Term.var orig name index))) (all: (orig: U60) (name: U60) (typ: Kind.Term) (self: U60) (body: (_: Kind.Term)((_: Kind.Term))) (p (Kind.Term.all orig name typ self body))) (lam: (orig: U60) (name: U60) (body: (_: Kind.Term) Kind.Term) (p (Kind.Term.lam orig name body))) (app: (orig: U60) (func: Kind.Term) (arg: Kind.Term) (p (Kind.Term.app orig func arg))) (let: (orig: U60) (name: U60) (expr: Kind.Term) (body: (_: Kind.Term) Kind.Term) (p (Kind.Term.let orig name expr body))) (ann: (orig: U60) (expr: Kind.Term) (typ: Kind.Term) (p (Kind.Term.ann orig expr typ))) (ct0: (ctid: U60) (orig: U60) (p (Kind.Term.ct0 ctid orig))) (ct1: (ctid: U60) (orig: U60) (x0: Kind.Term) (p (Kind.Term.ct1 ctid orig x0))) (ct2: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (p (Kind.Term.ct2 ctid orig x0 x1))) (ct3: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (p (Kind.Term.ct3 ctid orig x0 x1 x2))) (ct4: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (p (Kind.Term.ct4 ctid orig x0 x1 x2 x3))) (ct5: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (p (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4))) (ct6: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (x5: Kind.Term) (p (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5))) (ct7: (ctid: U60) (orig: U60) (args: Kind.Term) (p (Kind.Term.ct7 ctid orig args))) (ct8: (ctid: U60) (orig: U60) (args: Kind.Term) (p (Kind.Term.ct8 ctid orig args))) (fn0: (ctid: U60) (orig: U60) (p (Kind.Term.fn0 ctid orig))) (fn1: (ctid: U60) (orig: U60) (x0: Kind.Term) (p (Kind.Term.fn1 ctid orig x0))) (fn2: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (p (Kind.Term.fn2 ctid orig x0 x1))) (fn3: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (p (Kind.Term.fn3 ctid orig x0 x1 x2))) (fn4: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (p (Kind.Term.fn4 ctid orig x0 x1 x2 x3))) (fn5: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (p (Kind.Term.fn5 ctid orig x0 x1 x2 x3 x4))) (fn6: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (x5: Kind.Term) (p (Kind.Term.fn6 ctid orig x0 x1 x2 x3 x4 x5))) (fn7: (ctid: U60) (orig: U60) (args: Kind.Term) (p (Kind.Term.fn7 ctid orig args))) (fn8: (ctid: U60) (orig: U60) (args: Kind.Term) (p (Kind.Term.fn8 ctid orig args))) (FN0: (ctid: U60) (orig: U60) (p (Kind.Term.FN0 ctid orig))) (FN1: (ctid: U60) (orig: U60) (x0: Kind.Term) (p (Kind.Term.FN1 ctid orig x0))) (FN2: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (p (Kind.Term.FN2 ctid orig x0 x1))) (FN3: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (p (Kind.Term.FN3 ctid orig x0 x1 x2))) (FN4: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (p (Kind.Term.FN4 ctid orig x0 x1 x2 x3))) (FN5: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (p (Kind.Term.FN5 ctid orig x0 x1 x2 x3 x4))) (FN6: (ctid: U60) (orig: U60) (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (x5: Kind.Term) (p (Kind.Term.FN6 ctid orig x0 x1 x2 x3 x4 x5))) (FN7: (ctid: U60) (orig: U60) (args: Kind.Term) (p (Kind.Term.FN7 ctid orig args))) (FN8: (ctid: U60) (orig: U60) (args: Kind.Term) (p (Kind.Term.FN8 ctid orig args))) (hlp: (orig: U60) (p (Kind.Term.hlp orig))) (u60: (orig: U60) (p (Kind.Term.u60 orig))) (num: (orig: U60) (num: U60) (p (Kind.Term.num orig num))) (op2: (orig: U60) (operator: Kind.Operator) (left: Kind.Term) (right: Kind.Term) (p (Kind.Term.op2 orig operator left right))) (args7: (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (x5: Kind.Term) (x6: Kind.Term) (p (Kind.Term.args7 x0 x1 x2 x3 x4 x5 x6))) (args8: (x0: Kind.Term) (x1: Kind.Term) (x2: Kind.Term) (x3: Kind.Term) (x4: Kind.Term) (x5: Kind.Term) (x6: Kind.Term) (x7: Kind.Term) (p (Kind.Term.args8 x0 x1 x2 x3 x4 x5 x6 x7))) : (p x)
Kind.Term.match (Kind.Term.typ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (typ orig_)
Kind.Term.match (Kind.Term.hol orig_ number_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (hol orig_ number_)
Kind.Term.match (Kind.Term.var orig_ name_ index_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (var orig_ name_ index_)
Kind.Term.match (Kind.Term.all orig_ name_ typ_ self_ body_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (all orig_ name_ typ_ self_ body_)
Kind.Term.match (Kind.Term.lam orig_ name_ body_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (lam orig_ name_ body_)
Kind.Term.match (Kind.Term.app orig_ func_ arg_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (app orig_ func_ arg_)
Kind.Term.match (Kind.Term.let orig_ name_ expr_ body_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (let orig_ name_ expr_ body_)
Kind.Term.match (Kind.Term.ann orig_ expr_ typ_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ann orig_ expr_ typ_)
Kind.Term.match (Kind.Term.ct0 ctid_ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct0 ctid_ orig_)
Kind.Term.match (Kind.Term.ct1 ctid_ orig_ x0_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct1 ctid_ orig_ x0_)
Kind.Term.match (Kind.Term.ct2 ctid_ orig_ x0_ x1_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct2 ctid_ orig_ x0_ x1_)
Kind.Term.match (Kind.Term.ct3 ctid_ orig_ x0_ x1_ x2_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct3 ctid_ orig_ x0_ x1_ x2_)
Kind.Term.match (Kind.Term.ct4 ctid_ orig_ x0_ x1_ x2_ x3_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct4 ctid_ orig_ x0_ x1_ x2_ x3_)
Kind.Term.match (Kind.Term.ct5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_)
Kind.Term.match (Kind.Term.ct6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_)
Kind.Term.match (Kind.Term.ct7 ctid_ orig_ args_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct7 ctid_ orig_ args_)
Kind.Term.match (Kind.Term.ct8 ctid_ orig_ args_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (ct8 ctid_ orig_ args_)
Kind.Term.match (Kind.Term.fn0 ctid_ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn0 ctid_ orig_)
Kind.Term.match (Kind.Term.fn1 ctid_ orig_ x0_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn1 ctid_ orig_ x0_)
Kind.Term.match (Kind.Term.fn2 ctid_ orig_ x0_ x1_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn2 ctid_ orig_ x0_ x1_)
Kind.Term.match (Kind.Term.fn3 ctid_ orig_ x0_ x1_ x2_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn3 ctid_ orig_ x0_ x1_ x2_)
Kind.Term.match (Kind.Term.fn4 ctid_ orig_ x0_ x1_ x2_ x3_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn4 ctid_ orig_ x0_ x1_ x2_ x3_)
Kind.Term.match (Kind.Term.fn5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_)
Kind.Term.match (Kind.Term.fn6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_)
Kind.Term.match (Kind.Term.fn7 ctid_ orig_ args_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn7 ctid_ orig_ args_)
Kind.Term.match (Kind.Term.fn8 ctid_ orig_ args_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (fn8 ctid_ orig_ args_)
Kind.Term.match (Kind.Term.FN0 ctid_ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN0 ctid_ orig_)
Kind.Term.match (Kind.Term.FN1 ctid_ orig_ x0_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN1 ctid_ orig_ x0_)
Kind.Term.match (Kind.Term.FN2 ctid_ orig_ x0_ x1_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN2 ctid_ orig_ x0_ x1_)
Kind.Term.match (Kind.Term.FN3 ctid_ orig_ x0_ x1_ x2_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN3 ctid_ orig_ x0_ x1_ x2_)
Kind.Term.match (Kind.Term.FN4 ctid_ orig_ x0_ x1_ x2_ x3_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN4 ctid_ orig_ x0_ x1_ x2_ x3_)
Kind.Term.match (Kind.Term.FN5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_)
Kind.Term.match (Kind.Term.FN6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_)
Kind.Term.match (Kind.Term.FN7 ctid_ orig_ args_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN7 ctid_ orig_ args_)
Kind.Term.match (Kind.Term.FN8 ctid_ orig_ args_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (FN8 ctid_ orig_ args_)
Kind.Term.match (Kind.Term.hlp orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (hlp orig_)
Kind.Term.match (Kind.Term.u60 orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (u60 orig_)
Kind.Term.match (Kind.Term.num orig_ num_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (num orig_ num_)
Kind.Term.match (Kind.Term.op2 orig_ operator_ left_ right_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (op2 orig_ operator_ left_ right_)
Kind.Term.match (Kind.Term.args7 x0_ x1_ x2_ x3_ x4_ x5_ x6_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (args7 x0_ x1_ x2_ x3_ x4_ x5_ x6_)
Kind.Term.match (Kind.Term.args8 x0_ x1_ x2_ x3_ x4_ x5_ x6_ x7_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 FN0 FN1 FN2 FN3 FN4 FN5 FN6 FN7 FN8 hlp u60 num op2 args7 args8 = (args8 x0_ x1_ x2_ x3_ x4_ x5_ x6_ x7_)
